
if(cx==Nx && cy==Ny)
{
cnt=cnt+1;
ghostatoms[cnt]=malloc(sizeof(Atom));
*ghostatoms[cnt]=*atom[i];
ghostatoms[cnt]->x=atom[i]->x-(box.xhi-box.xlo);
ghostatoms[cnt]->y=atom[i]->y-(box.yhi-box.ylo);
cx=ceil((ghostatoms[cnt]->x-box.xlo)/delx);
cy=ceil((ghostatoms[cnt]->y-box.ylo)/dely);
cz=cz;
c=scalarcellindex(cx,cy,cz,Nx,Ny,Nz);
curr=addfrontnode(head[c],ghostatoms[cnt]);
head[c]=curr;
//printf("%d\n",c);
}


if(cx==1 && cy==Ny)
{
cnt=cnt+1;
ghostatoms[cnt]=malloc(sizeof(Atom));
*ghostatoms[cnt]=*atom[i];
ghostatoms[cnt]->x=atom[i]->x+(box.xhi-box.xlo);
ghostatoms[cnt]->y=atom[i]->y-(box.yhi-box.ylo);
cx=ceil((ghostatoms[cnt]->x-box.xlo)/delx);
cy=ceil((ghostatoms[cnt]->y-box.ylo)/dely);
cz=cz;
c=scalarcellindex(cx,cy,cz,Nx,Ny,Nz);
curr=addfrontnode(head[c],ghostatoms[cnt]);
head[c]=curr;
//printf("%d\n",c);
}


if(cx==Nx && cy==1)
{
cnt=cnt+1;
ghostatoms[cnt]=malloc(sizeof(Atom));
*ghostatoms[cnt]=*atom[i];
ghostatoms[cnt]->x=atom[i]->x-(box.xhi-box.xlo);
ghostatoms[cnt]->y=atom[i]->y+(box.yhi-box.ylo);
cx=ceil((ghostatoms[cnt]->x-box.xlo)/delx);
cy=ceil((ghostatoms[cnt]->y-box.ylo)/dely);
cz=cz;
c=scalarcellindex(cx,cy,cz,Nx,Ny,Nz);
curr=addfrontnode(head[c],ghostatoms[cnt]);
head[c]=curr;
//printf("%d\n",c);
}


if(cx==1 && cy==1)
{
cnt=cnt+1;
ghostatoms[cnt]=malloc(sizeof(Atom));
*ghostatoms[cnt]=*atom[i];
ghostatoms[cnt]->x=atom[i]->x+(box.xhi-box.xlo);
ghostatoms[cnt]->y=atom[i]->y+(box.yhi-box.ylo);
cx=ceil((ghostatoms[cnt]->x-box.xlo)/delx);
cy=ceil((ghostatoms[cnt]->y-box.ylo)/dely);
cz=cz;
c=scalarcellindex(cx,cy,cz,Nx,Ny,Nz);
curr=addfrontnode(head[c],ghostatoms[cnt]);
head[c]=curr;
//printf("%d\n",c);
}


if(cx==1 && cy!=0 && cy!=Ny+1)
{
cnt=cnt+1;
ghostatoms[cnt]=malloc(sizeof(Atom));
*ghostatoms[cnt]=*atom[i];
ghostatoms[cnt]->x=atom[i]->x+(box.xhi-box.xlo);
cx=ceil((ghostatoms[cnt]->x-box.xlo)/delx);
cy=cy;
cz=cz;
c=scalarcellindex(cx,cy,cz,Nx,Ny,Nz);
curr=addfrontnode(head[c],ghostatoms[cnt]);
head[c]=curr;
//printf("%d\n",c);
}


if(cy==1 && cx!=0 && cx!=Nx+1)
{
cnt=cnt+1;
ghostatoms[cnt]=malloc(sizeof(Atom));
*ghostatoms[cnt]=*atom[i];
ghostatoms[cnt]->y=atom[i]->y+(box.yhi-box.ylo);
cx=cx;
cy=ceil((ghostatoms[cnt]->y-box.ylo)/dely);
cz=cz;
c=scalarcellindex(cx,cy,cz,Nx,Ny,Nz);
curr=addfrontnode(head[c],ghostatoms[cnt]);
head[c]=curr;
//printf("%d\n",c);
}



if(cx==Nx && cy!=0 && cy!=Ny+1)
{
cnt=cnt+1;
ghostatoms[cnt]=malloc(sizeof(Atom));
*ghostatoms[cnt]=*atom[i];
ghostatoms[cnt]->x=atom[i]->x-(box.xhi-box.xlo);
cx=ceil((ghostatoms[cnt]->x-box.xlo)/delx);
cy=cy;
cz=cz;
c=scalarcellindex(cx,cy,cz,Nx,Ny,Nz);
curr=addfrontnode(head[c],ghostatoms[cnt]);
head[c]=curr;
//printf("%d\n",c);
}


if(cy==Ny && cx!=0 && cx!=Nx+1)
{
cnt=cnt+1;
ghostatoms[cnt]=malloc(sizeof(Atom));
*ghostatoms[cnt]=*atom[i];
ghostatoms[cnt]->y=atom[i]->y-(box.yhi-box.ylo);
cx=cx;
cy=ceil((ghostatoms[cnt]->y-box.ylo)/dely);
cz=cz;
c=scalarcellindex(cx,cy,cz,Nx,Ny,Nz);
curr=addfrontnode(head[c],ghostatoms[cnt]);
head[c]=curr;
//printf("%d\n",c);
}

if(cz==1)
{
cnt=cnt+1;
ghostatoms[cnt]=malloc(sizeof(Atom));
*ghostatoms[cnt]=*atom[i];
ghostatoms[cnt]->z=atom[i]->z+(box.zhi-box.zlo);
cx=cx;
cy=cy;
cz=ceil((ghostatoms[cnt]->z-box.zlo)/delz);
c=scalarcellindex(cx,cy,cz,Nx,Ny,Nz);
curr=addfrontnode(head[c],ghostatoms[cnt]);
head[c]=curr;
//printf("%d\n",c);
}

if(cz==Nz)
{
cnt=cnt+1;
ghostatoms[cnt]=malloc(sizeof(Atom));
*ghostatoms[cnt]=*atom[i];
ghostatoms[cnt]->z=atom[i]->z-(box.zhi-box.zlo);
cx=cx;
cy=cy;
cz=ceil((ghostatoms[cnt]->z-box.zlo)/delz);
c=scalarcellindex(cx,cy,cz,Nx,Ny,Nz);
curr=addfrontnode(head[c],ghostatoms[cnt]);
head[c]=curr;
//printf("%d\n",c);
}


